using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Windows.Forms;
using System.Xml;

namespace Log4netEditor
{
  public class frmLogger : Form
  {
    #region WinForm Controls

    private Button btnCancel;
    private Button btnSave;
    private IContainer components;
    private ComboBox ddlAdditivity;
    private ComboBox ddlLevel;
    private GroupBox gbAppenderList;
    private Label lblAdditivity;
    private Label lblLevel;
    private Label lblLogger;
    private ToolTip toolTip;
    private TextBox txtLoggerName;
    #endregion

    private XmlDocument moXmlDoc;
    private DataGridView dgAppenders;
    private string ms_tmpRquid = null;
    private DataGridViewComboBoxColumn appenderName;
    private DataGridViewTextBoxColumn appenderType;
    private static readonly Dictionary<string, string> _appenderClassDtnry = new Dictionary<string, string>();

    // Methods
    public frmLogger(XmlDocument log4net_config_XmlDoc)
    {
      InitializeComponent();
      moXmlDoc = log4net_config_XmlDoc;
      InitAppenderList();
    }

    public void EditExistedLogger(string sloggerName, string rquid)
    {
      ms_tmpRquid = rquid;
      XmlNode oLogger = null;
      DataTable dtAppenders = new DataTable("Appenders");
      dtAppenders.Columns.Add("Appender Name", typeof(string));
      dtAppenders.Columns.Add("Appender Type", typeof(string));
      if ("root" == sloggerName)
      {
        foreach (XmlNode node2 in moXmlDoc.SelectNodes("//root"))
        {
          if (CompareLogger(out oLogger, node2))
          {
            txtLoggerName.Text = "root";
            break;
          }
        }
      }
      else
      {
        foreach (XmlNode node2 in moXmlDoc.SelectNodes("//logger"))
        {
          if (node2.Attributes["name"].Value == sloggerName)
          {
            if (CompareLogger(out oLogger, node2))
            {
              txtLoggerName.Text = oLogger.Attributes["name"].Value;
              break;
            }
          }
        }
      }

      if (oLogger == null)
      {
        MessageBox.Show(this, "Logger(" + sloggerName + ") is not existed!", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
      }
      else
      {
        ddlAdditivity.Text = (oLogger.Attributes["additivity"] == null) ? "true" : oLogger.Attributes["additivity"].Value;
        ddlLevel.Text = oLogger.SelectSingleNode("level").Attributes["value"].Value;
        foreach (XmlNode node3 in oLogger.SelectNodes("appender-ref"))
        {
          DataRow drAppender = dtAppenders.NewRow();
          drAppender[dtAppenders.Columns[0].ColumnName] = node3.Attributes["ref"].Value;
          foreach (XmlNode node4 in moXmlDoc.SelectNodes("//appender"))
          {
            if (node4.Attributes["name"].Value == node3.Attributes["ref"].Value)
            {
              drAppender[dtAppenders.Columns[1].ColumnName] = node4.Attributes["type"].Value;
              break;
            }
          }

          dtAppenders.Rows.Add(drAppender);
        }

        dgAppenders.DataSource = dtAppenders;
        dtAppenders.ColumnChanged += new DataColumnChangeEventHandler(DtAppenders_ColumnChanged);
      }
    }

    void DtAppenders_ColumnChanged(object sender, DataColumnChangeEventArgs e)
    {
      if ("Appender Name" == e.Column.ColumnName)
      {
        e.Row["Appender Type"] = _appenderClassDtnry[(string)e.Row["Appender Name"]];
      }
      else
      {
        dgAppenders.Refresh();
      }
    }

    public void EditExistedLogger(string sloggerName)
    {
      EditExistedLogger(sloggerName, null);
    }

    public new DialogResult ShowDialog(IWin32Window owner)
    {
      if (dgAppenders.DataSource == null)
      {
        DataTable table1 = new DataTable("AppenderList");
        table1.Columns.Add("Name", typeof(string));
        table1.Columns.Add("Type", typeof(string));
        dgAppenders.DataSource = table1;
      }

      return base.ShowDialog(owner);
    }

    public XmlDocument Current_Log4net_config_XmlDoc
    {
      get { return moXmlDoc; }
    }

    #region Code generated by VS2003
    private void InitializeComponent()
    {
      components = new Container();
      DataGridViewCellStyle dataGridViewCellStyle1 = new DataGridViewCellStyle();
      txtLoggerName = new TextBox();
      lblLogger = new Label();
      lblLevel = new Label();
      ddlLevel = new ComboBox();
      lblAdditivity = new Label();
      ddlAdditivity = new ComboBox();
      btnCancel = new Button();
      btnSave = new Button();
      toolTip = new ToolTip(components);
      gbAppenderList = new GroupBox();
      dgAppenders = new DataGridView();
      appenderName = new DataGridViewComboBoxColumn();
      appenderType = new DataGridViewTextBoxColumn();
      gbAppenderList.SuspendLayout();
      ((ISupportInitialize)(dgAppenders)).BeginInit();
      SuspendLayout();
      // 
      // txtLoggerName
      // 
      txtLoggerName.Location = new System.Drawing.Point(40, 80);
      txtLoggerName.Name = "txtLoggerName";
      txtLoggerName.Size = new System.Drawing.Size(368, 21);
      txtLoggerName.TabIndex = 5;
      toolTip.SetToolTip(txtLoggerName, "Pick a logger name.");
      // 
      // lblLogger
      // 
      lblLogger.AutoSize = true;
      lblLogger.Location = new System.Drawing.Point(8, 48);
      lblLogger.Name = "lblLogger";
      lblLogger.Size = new System.Drawing.Size(89, 15);
      lblLogger.TabIndex = 4;
      lblLogger.Text = "Logger Name :";
      // 
      // lblLevel
      // 
      lblLevel.AutoSize = true;
      lblLevel.Location = new System.Drawing.Point(8, 112);
      lblLevel.Name = "lblLevel";
      lblLevel.Size = new System.Drawing.Size(113, 15);
      lblLevel.TabIndex = 6;
      lblLevel.Text = "Choose Log Level :";
      // 
      // ddlLevel
      // 
      ddlLevel.DropDownStyle = ComboBoxStyle.DropDownList;
      ddlLevel.Items.AddRange(new object[] {
            "OFF",
            "FATAL",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "ALL"});
      ddlLevel.Location = new System.Drawing.Point(40, 136);
      ddlLevel.Name = "ddlLevel";
      ddlLevel.Size = new System.Drawing.Size(368, 23);
      ddlLevel.TabIndex = 7;
      toolTip.SetToolTip(ddlLevel, "Choose a level to decide what kind of info you want to write into log.");
      // 
      // lblAdditivity
      // 
      lblAdditivity.AutoSize = true;
      lblAdditivity.Location = new System.Drawing.Point(8, 168);
      lblAdditivity.Name = "lblAdditivity";
      lblAdditivity.Size = new System.Drawing.Size(59, 15);
      lblAdditivity.TabIndex = 8;
      lblAdditivity.Text = "Additivity :";
      // 
      // ddlAdditivity
      // 
      ddlAdditivity.DropDownStyle = ComboBoxStyle.DropDownList;
      ddlAdditivity.Items.AddRange(new object[] {
            "true",
            "false"});
      ddlAdditivity.Location = new System.Drawing.Point(40, 192);
      ddlAdditivity.Name = "ddlAdditivity";
      ddlAdditivity.Size = new System.Drawing.Size(368, 23);
      ddlAdditivity.TabIndex = 9;
      toolTip.SetToolTip(ddlAdditivity, "Enable this logger or not.");
      // 
      // btnCancel
      // 
      btnCancel.DialogResult = DialogResult.Cancel;
      btnCancel.Location = new System.Drawing.Point(312, 432);
      btnCancel.Name = "btnCancel";
      btnCancel.Size = new System.Drawing.Size(75, 23);
      btnCancel.TabIndex = 13;
      btnCancel.Text = "&Cancel";
      btnCancel.Click += new EventHandler(BtnCancel_Click);
      // 
      // btnSave
      // 
      btnSave.Location = new System.Drawing.Point(392, 432);
      btnSave.Name = "btnSave";
      btnSave.Size = new System.Drawing.Size(75, 23);
      btnSave.TabIndex = 12;
      btnSave.Text = "&Save";
      btnSave.Click += new EventHandler(BtnSave_Click);
      // 
      // gbAppenderList
      // 
      gbAppenderList.Controls.Add(dgAppenders);
      gbAppenderList.Location = new System.Drawing.Point(8, 224);
      gbAppenderList.Name = "gbAppenderList";
      gbAppenderList.Size = new System.Drawing.Size(456, 200);
      gbAppenderList.TabIndex = 14;
      gbAppenderList.TabStop = false;
      gbAppenderList.Text = "Appender List";
      // 
      // dgAppenders
      // 
      dataGridViewCellStyle1.Alignment = DataGridViewContentAlignment.MiddleLeft;
      dataGridViewCellStyle1.BackColor = System.Drawing.Color.Black;
      dataGridViewCellStyle1.Font = new System.Drawing.Font("Arial", 9F, System.Drawing.FontStyle.Bold);
      dataGridViewCellStyle1.ForeColor = System.Drawing.Color.White;
      dataGridViewCellStyle1.SelectionBackColor = System.Drawing.SystemColors.Highlight;
      dataGridViewCellStyle1.SelectionForeColor = System.Drawing.SystemColors.HighlightText;
      dataGridViewCellStyle1.WrapMode = DataGridViewTriState.True;
      dgAppenders.ColumnHeadersDefaultCellStyle = dataGridViewCellStyle1;
      dgAppenders.ColumnHeadersHeightSizeMode = DataGridViewColumnHeadersHeightSizeMode.AutoSize;
      dgAppenders.Columns.AddRange(new DataGridViewColumn[] {
            appenderName,
            appenderType});
      dgAppenders.Location = new System.Drawing.Point(7, 21);
      dgAppenders.Name = "dgAppenders";
      dgAppenders.RowTemplate.Height = 24;
      dgAppenders.Size = new System.Drawing.Size(441, 173);
      dgAppenders.TabIndex = 18;
      // 
      // appenderName
      // 
      appenderName.DataPropertyName = "Appender Name";
      appenderName.HeaderText = "Appender Name";
      appenderName.Name = "appenderName";
      appenderName.Width = 200;
      // 
      // appenderType
      // 
      appenderType.AutoSizeMode = DataGridViewAutoSizeColumnMode.DisplayedCells;
      appenderType.DataPropertyName = "Appender Type";
      appenderType.HeaderText = "Appender Type";
      appenderType.Name = "appenderType";
      appenderType.ReadOnly = true;
      appenderType.Width = 108;
      // 
      // frmLogger
      // 
      AutoScaleBaseSize = new System.Drawing.Size(6, 14);
      ClientSize = new System.Drawing.Size(472, 464);
      Controls.Add(gbAppenderList);
      Controls.Add(btnCancel);
      Controls.Add(btnSave);
      Controls.Add(lblAdditivity);
      Controls.Add(lblLevel);
      Controls.Add(txtLoggerName);
      Controls.Add(lblLogger);
      Controls.Add(ddlAdditivity);
      Controls.Add(ddlLevel);
      Font = new System.Drawing.Font("Arial", 9F);
      FormBorderStyle = FormBorderStyle.FixedSingle;
      MaximizeBox = false;
      MinimizeBox = false;
      Name = "frmLogger";
      Text = "Log4net Logger Editor";
      gbAppenderList.ResumeLayout(false);
      ((ISupportInitialize)(dgAppenders)).EndInit();
      ResumeLayout(false);
      PerformLayout();

    }

    protected override void Dispose(bool disposing)
    {
      if (disposing && (components != null))
      {
        components.Dispose();
      }

      base.Dispose(disposing);
    }

    #endregion

    private void BtnCancel_Click(object sender, EventArgs e)
    {
      Close();
      Dispose();
    }

    private void BtnSave_Click(object sender, EventArgs e)
    {
      XmlNode oLogger = null;
      string sLoggerName = txtLoggerName.Text;
      bool IsNewLogger = false;

      #region Search this logger node
      if ("root" == sLoggerName)
      {
        foreach (XmlNode node2 in moXmlDoc.SelectNodes("//root"))
        {
          if (CompareLogger(out oLogger, node2)) break;
        }
      }
      else
      {
        foreach (XmlNode node2 in moXmlDoc.SelectNodes("//logger"))
        {
          if (node2.Attributes["name"].Value == sLoggerName)
          {
            if (CompareLogger(out oLogger, node2)) break;
          }
        }
      }
      #endregion

      try
      {
        if (oLogger == null)
        {
          #region Create new logger node
          IsNewLogger = true;
          if ("root" == sLoggerName)
          {
            oLogger = moXmlDoc.CreateElement("root");
          }
          else
          {
            oLogger = moXmlDoc.CreateElement("logger");
          }

          XmlAttribute tmpAttri = moXmlDoc.CreateAttribute("name");
          tmpAttri.Value = sLoggerName;
          oLogger.Attributes.Append(tmpAttri);

          tmpAttri = moXmlDoc.CreateAttribute("additivity");
          tmpAttri.Value = ddlAdditivity.Text;
          oLogger.Attributes.Append(tmpAttri);

          tmpAttri = moXmlDoc.CreateAttribute("rquid");
          tmpAttri.Value = Guid.NewGuid().ToString();
          oLogger.Attributes.Append(tmpAttri);
          XmlElement element1 = moXmlDoc.CreateElement("level");
          XmlAttribute attribute2 = moXmlDoc.CreateAttribute("value");
          attribute2.Value = ddlLevel.Text;
          element1.Attributes.Append(attribute2);
          oLogger.AppendChild(element1);
          #endregion
        }
        else
        {
          string tmpRquid = null;
          if (null != oLogger.Attributes["rquid"])
          {
            tmpRquid = oLogger.Attributes["rquid"].Value;
          }

          IsNewLogger = false;
          oLogger.RemoveAll();
          XmlAttribute tmpAttri = moXmlDoc.CreateAttribute("name");
          tmpAttri.Value = sLoggerName;
          oLogger.Attributes.Append(tmpAttri);

          tmpAttri = moXmlDoc.CreateAttribute("additivity");
          tmpAttri.Value = ddlAdditivity.Text;
          oLogger.Attributes.Append(tmpAttri);

          tmpAttri = moXmlDoc.CreateAttribute("rquid");
          tmpAttri.Value = ((null == tmpRquid) ? Guid.NewGuid().ToString() : tmpRquid);
          oLogger.Attributes.Append(tmpAttri);

          XmlNode node3 = oLogger.SelectSingleNode("level");
          if (node3 != null)
          {
            node3.Attributes["value"].Value = ddlLevel.Text;
          }
          else
          {
            node3 = moXmlDoc.CreateElement("level");
            XmlAttribute attribute4 = moXmlDoc.CreateAttribute("value");
            attribute4.Value = ddlLevel.Text;
            node3.Attributes.Append(attribute4);
            oLogger.AppendChild(node3);
          }
        }

        foreach (DataRow row1 in ((DataTable)dgAppenders.DataSource).Rows)
        {
          XmlNode node4 = moXmlDoc.CreateElement("appender-ref");
          XmlAttribute attribute5 = moXmlDoc.CreateAttribute("ref");
          attribute5.Value = (string)row1[0];
          node4.Attributes.Append(attribute5);
          oLogger.AppendChild(node4);
        }

        if (IsNewLogger)
        {
          moXmlDoc.DocumentElement.InsertAfter(oLogger, moXmlDoc.DocumentElement.LastChild);
        }
      }
      catch (Exception exception)
      {
        MessageBox.Show(this, exception.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
        return;
      }

      DialogResult = DialogResult.OK;
      Close();
    }

    private void InitAppenderList()
    {
      _appenderClassDtnry.Clear();
      XmlNodeList list1 = moXmlDoc.SelectNodes("//appender");
      foreach (XmlNode node1 in list1)
      {
        appenderName.Items.Add(node1.Attributes["name"].Value);
        _appenderClassDtnry.Add(node1.Attributes["name"].Value, node1.Attributes["type"].Value);
      }
    }

    private bool CompareLogger(out XmlNode targetLogger, XmlNode logger)
    {
      targetLogger = null;
      if (null != ms_tmpRquid && string.Empty != ms_tmpRquid)
      {
        #region Compare Rquid
        if (null != logger.Attributes["rquid"])
        {
          if (ms_tmpRquid == logger.Attributes["rquid"].Value)
          {
            targetLogger = logger;
          }
        }
        #endregion
      }
      else
      {
        if (null == logger.Attributes["rquid"] || string.Empty == logger.Attributes["rquid"].Value) targetLogger = logger;
      }
      return !(null == targetLogger);
    }
  }
}
